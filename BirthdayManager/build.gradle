/*
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */
apply plugin: 'java-library'
apply plugin: 'application'

import java.text.SimpleDateFormat

mainClassName = 'application.AppStart'
version = '0.2.x-beta'

def websiteDest = 'C:/Users/Admin/git/BirthdayManagerWebsite'
def name = 'Birthday Manager'

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'
    
    // https://mvnrepository.com/artifact/de.dynamicfiles.projects.gradle.plugins/javafx-gradle-plugin
	compile group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    
    // https://mvnrepository.com/artifact/xerces/xercesImpl For log4J
	compile group: 'xerces', name: 'xercesImpl', version: '2.12.0'
    
    //Log4J
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
 	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
 	
 	compile 'net.sf.biweekly:biweekly:0.6.3'	
	
	//hamcrest
	testImplementation 'org.hamcrest:hamcrest:2.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
	
	// https://mvnrepository.com/artifact/junit-addons/junit-addons
	testCompile group: 'junit-addons', name: 'junit-addons', version: '1.4'

	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
	
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
	mavenCentral()
}

clean {
    delete "C:/Users/Admin/git/BirthdayManagerWebsite/jar"
    delete "C:/Users/Admin/git/BirthdayManagerWebsite/javaDocs"
}

def getDate() {
    return new Date().format('dd.MM.yyyy_HH:mm:ss')
}

task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['date'] = getDate()
        p.store w, null
    }
  }
}

classes {
    dependsOn createProperties
}

task versionJS()  {
	group = "custom"
    doLast {
        new File(websiteDest + "/version.js").text =
"""
let version = 'Version: $version';
let time = 'Buildtime:  ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}';
let tab = " - "

var buildInfo = document.getElementById("buildInfo");

var versionTxt = document.createTextNode(version + tab + time);

buildInfo.appendChild(versionTxt);
/*
Version: $version
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: $name
*/
"""
    }
}

task customFatJar(type: Jar) {
	group = "custom"
    manifest {
        attributes 'Implementation-Title': name,  
        	'Implementation-Version': version,
        	'Main-Class': 'application.AppStart',
        	'Build-Time-ISO-8601': getDate()
    }
    baseName = 'BirthdayManager'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyBuild(type: Copy) {
	group = "custom"
    from "$buildDir/jar"
    into "C:/Users/Admin/git/BirthdayManagerWebsite/jar"
    dependsOn 'versionJS'
}

task copyDoc(type: Copy) {
	group = "custom"
    from "$buildDir/doc"
    into websiteDest + "/javaDocs"
}



task cleanBuildPublish {
	group = "custom"
    dependsOn 'clean'
    dependsOn 'customFatJar'
    dependsOn 'javadoc'
    dependsOn 'copyBuild'
    dependsOn 'copyDoc'
    dependsOn 'versionJS'
    tasks.findByName('customFatJar').mustRunAfter 'clean'
    tasks.findByName('javadoc').mustRunAfter 'clean'
    tasks.findByName('copyBuild').mustRunAfter 'customFatJar'
    tasks.findByName('copyDoc').mustRunAfter 'javadoc'

}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/build/jar")
}
tasks.withType(Javadoc) {
	destinationDir = file("$rootDir/build/doc")
}


